snippet CumulativeSum2D
options head
    // CumulativeSum2D {{{
    // 0-indexed
    template <class T>
    class CumulativeSum2D {
        vector<vector<T>> csum;

    public:
        CumulativeSum2D() {}
        CumulativeSum2D(const size_t h, const size_t w) : csum(h + 1, vector<T>(w + 1)) {}

        void add(size_t r, size_t c, T v) {
            csum[r + 1][c + 1] += v;
        }

        void build() {
            const size_t h = csum.size(), w = csum[0].size();
            for (size_t r = 1; r < h; ++r) {
                for (size_t c = 1; c < w; ++c) {
                    csum[r][c] += csum[r][c - 1] + csum[r - 1][c] - csum[r - 1][c - 1];
                }
            }
        }

        // sum of (r, c) s.t. sr <= r <= tr, sc <= c <= tc
        T sum(size_t sr, size_t tr, size_t sc, size_t tc) const {
            sr++, tr++, sc++, tc++;
            return csum[tr][tc] - csum[sr - 1][tc] - csum[tr][sc - 1] + csum[sr - 1][sc - 1];
        }

        void assign(const size_t h, const size_t w) {
            csum.assign(h + 1, vector<T>(w + 1));
        }

        size_t height() const noexcept {
            return csum.size() - 1;
        }

        size_t width() const noexcept {
            return csum[0].size() - 1;
        }

        const auto& data() const noexcept {
            return csum;
        }
    };
    // }}}
