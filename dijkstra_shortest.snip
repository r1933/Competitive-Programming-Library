snippet dijkstra_shortest
options head
    // dijkstra {{{
    template <class Weight>
    vector<Weight> dijkstra(const Graph<Weight> &G, const vector<size_t> &start_nodes) {
        using P = pair<Weight, size_t>;
        vector<Weight> dp(G.size(), numeric_limits<Weight>::max());
        priority_queue<P, vector<P>, greater<>> pq;

        for (const auto start_node: start_nodes) {
            dp[start_node] = 0;
            pq.emplace(0, start_node);
        }

        while (!pq.empty()) {
            const Weight cur_cost = pq.top().first;
            const size_t cur_node = pq.top().second;
            pq.pop();

            if (dp[cur_node] < cur_cost) {
                continue;
            }

            for (const auto &e: G[cur_node]) {
                const Weight new_cost = dp[cur_node] + e.weight;
                const size_t new_node = e.to;
                if (new_cost < dp[new_node]) {
                    dp[new_node] = new_cost;
                    pq.emplace(new_cost, new_node);
                }
            }
        }

        return dp;
    }
    // }}}
