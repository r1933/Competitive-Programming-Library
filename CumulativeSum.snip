snippet CumulativeSum
options head
    // CumulativeSum {{{
    template <class T>
    class CumulativeSum {
        vector<T> cumsum;

    public:
        CumulativeSum() : cumsum(1) {}
        CumulativeSum(size_t n) : cumsum(n + 1) {}

        void build() {
            for (size_t i = 1; i < cumsum.size(); ++i) {
                cumsum[i] += cumsum[i - 1];
            }
        }

        // Sum of closed interval [0, right)
        T sum(size_t right) const {
            return cumsum[right];
        }

        // Sum of closed interval [left, right)
        T sum(size_t left, size_t right) const {
            return sum(right) - sum(left);
        }

        T operator[](size_t i) const {
            return cumsum[i + 1];
        }

        T& operator[](size_t i) {
            return cumsum[i + 1];
        }

        void assign(const size_t n) {
            cumsum.assign(n + 1, 0);
        }

        size_t size() const noexcept {
            return cumsum.size() - 1;
        }

        const auto& data() const noexcept {
            return cumsum;
        }
    };
    // }}}
